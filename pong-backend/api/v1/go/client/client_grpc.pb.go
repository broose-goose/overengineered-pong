// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpcClient

import (
	context "context"
	common "github.com/polis-interactive/Pong/pong-backend/api/v1/go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClientClient is the client API for Client service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientClient interface {
	ClientStream(ctx context.Context, in *common.EmptyRequest, opts ...grpc.CallOption) (Client_ClientStreamClient, error)
	ClientPong(ctx context.Context, in *common.Pong, opts ...grpc.CallOption) (*common.EmptyResponse, error)
}

type clientClient struct {
	cc grpc.ClientConnInterface
}

func NewClientClient(cc grpc.ClientConnInterface) ClientClient {
	return &clientClient{cc}
}

func (c *clientClient) ClientStream(ctx context.Context, in *common.EmptyRequest, opts ...grpc.CallOption) (Client_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Client_ServiceDesc.Streams[0], "/PongBackend.v1.client.Client/ClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &clientClientStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Client_ClientStreamClient interface {
	Recv() (*ClientResponse, error)
	grpc.ClientStream
}

type clientClientStreamClient struct {
	grpc.ClientStream
}

func (x *clientClientStreamClient) Recv() (*ClientResponse, error) {
	m := new(ClientResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clientClient) ClientPong(ctx context.Context, in *common.Pong, opts ...grpc.CallOption) (*common.EmptyResponse, error) {
	out := new(common.EmptyResponse)
	err := c.cc.Invoke(ctx, "/PongBackend.v1.client.Client/ClientPong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientServer is the server API for Client service.
// All implementations must embed UnimplementedClientServer
// for forward compatibility
type ClientServer interface {
	ClientStream(*common.EmptyRequest, Client_ClientStreamServer) error
	ClientPong(context.Context, *common.Pong) (*common.EmptyResponse, error)
	mustEmbedUnimplementedClientServer()
}

// UnimplementedClientServer must be embedded to have forward compatible implementations.
type UnimplementedClientServer struct {
}

func (UnimplementedClientServer) ClientStream(*common.EmptyRequest, Client_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedClientServer) ClientPong(context.Context, *common.Pong) (*common.EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientPong not implemented")
}
func (UnimplementedClientServer) mustEmbedUnimplementedClientServer() {}

// UnsafeClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientServer will
// result in compilation errors.
type UnsafeClientServer interface {
	mustEmbedUnimplementedClientServer()
}

func RegisterClientServer(s grpc.ServiceRegistrar, srv ClientServer) {
	s.RegisterService(&Client_ServiceDesc, srv)
}

func _Client_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(common.EmptyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClientServer).ClientStream(m, &clientClientStreamServer{stream})
}

type Client_ClientStreamServer interface {
	Send(*ClientResponse) error
	grpc.ServerStream
}

type clientClientStreamServer struct {
	grpc.ServerStream
}

func (x *clientClientStreamServer) Send(m *ClientResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Client_ClientPong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Pong)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).ClientPong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PongBackend.v1.client.Client/ClientPong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).ClientPong(ctx, req.(*common.Pong))
	}
	return interceptor(ctx, in, info, handler)
}

// Client_ServiceDesc is the grpc.ServiceDesc for Client service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Client_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PongBackend.v1.client.Client",
	HandlerType: (*ClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClientPong",
			Handler:    _Client_ClientPong_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStream",
			Handler:       _Client_ClientStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "client.proto",
}
